// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 16.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace GenApi
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System.Globalization;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\AustinWise\Documents\Visual Studio 2017\Projects\Austin.Linode\GenApi\SpecGen.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public partial class SpecGen : SpecGenBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("/*\r\n *\r\n * Copyright (c) 2019, Austin Wise.\r\n * All rights reserved.\r\n *\r\n * Redi" +
                    "stribution and use in source and binary forms, with or without\r\n * modification," +
                    " are permitted provided that the following conditions are\r\n * met:\r\n *\r\n *     *" +
                    " Redistributions of source code must retain the above copyright\r\n *       notice" +
                    ", this list of conditions and the following disclaimer.\r\n *\r\n *     * Redistribu" +
                    "tions in binary form must reproduce the above copyright\r\n *       notice, this l" +
                    "ist of conditions and the following disclaimer in the\r\n *       documentation an" +
                    "d/or other materials provided with the distribution.\r\n *\r\n *     * Neither the n" +
                    "ame of the Austin.Linode Project, Austin Wise, nor the names\r\n *       of its co" +
                    "ntributors may be used to endorse or promote products\r\n *       derived from thi" +
                    "s software without specific prior written\r\n *       permission.\r\n *\r\n * THIS SOF" +
                    "TWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\r\n * IS\" AND ANY " +
                    "EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\r\n * THE IMPLIED WA" +
                    "RRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\r\n * PURPOSE ARE DISCLAI" +
                    "MED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\r\n * CONTRIBUTORS BE LIABLE FOR AN" +
                    "Y DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\r\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES" +
                    " (INCLUDING, BUT NOT LIMITED TO,\r\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES" +
                    "; LOSS OF USE, DATA, OR\r\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AN" +
                    "D ON ANY THEORY OF\r\n * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT" +
                    " (INCLUDING\r\n * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF TH" +
                    "IS\r\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n */\r\n\r\n// -" +
                    "-----------------------------------------------------------------------------\r\n/" +
                    "/ <auto-generated>\r\n//     This code was generated by a tool.\r\n//\r\n//     Change" +
                    "s to this file may cause incorrect behavior and will be lost if\r\n//     the code" +
                    " is regenerated.\r\n// </auto-generated>\r\n// -------------------------------------" +
                    "-----------------------------------------\r\n\r\nusing System;\r\nusing System.Collect" +
                    "ions.Generic;\r\nusing System.Globalization;\r\n\r\nnamespace Austin.Linode\r\n{\r\npartia" +
                    "l class LinodeClient\r\n{\r\n");
            
            #line 58 "D:\AustinWise\Documents\Visual Studio 2017\Projects\Austin.Linode\GenApi\SpecGen.tt"

int[] ver = new int[4];
string[] splits = SPEC.Version.Split('.');
for (int i = 0; i < splits.Length; i++)
{
	ver[i] = int.Parse(splits[i], CultureInfo.InvariantCulture);
}

            
            #line default
            #line hidden
            this.Write("        /// <summary>\r\n        /// From what version of the API spec was this cod" +
                    "e generated from.\r\n        /// </summary>\r\n\tpublic readonly Version GeneratedApi" +
                    "Version = new Version(");
            
            #line 69 "D:\AustinWise\Documents\Visual Studio 2017\Projects\Austin.Linode\GenApi\SpecGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ver[0]));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 69 "D:\AustinWise\Documents\Visual Studio 2017\Projects\Austin.Linode\GenApi\SpecGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ver[1]));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 69 "D:\AustinWise\Documents\Visual Studio 2017\Projects\Austin.Linode\GenApi\SpecGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ver[2]));
            
            #line default
            #line hidden
            this.Write(", ");
            
            #line 69 "D:\AustinWise\Documents\Visual Studio 2017\Projects\Austin.Linode\GenApi\SpecGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ver[3]));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 70 "D:\AustinWise\Documents\Visual Studio 2017\Projects\Austin.Linode\GenApi\SpecGen.tt"

    foreach (var meth in SPEC.Methods.OrderBy(kvp => kvp.Key))
    {
		if (meth.Key == "api.spec")
			continue; //this is created manually, otherwise there is a chicken/egg problem

		Type returnType = typeof(void);
		if (mReturnType.ContainsKey(meth.Key))
			returnType = mReturnType[meth.Key];

        int firstPeriodNdx = meth.Value.Description.IndexOf(". ");
        string summary, remarks;
        if (firstPeriodNdx < 0)
        {
            summary = meth.Value.Description.Trim();
            remarks = null;
        }
        else
        {
            summary = meth.Value.Description.Substring(0, firstPeriodNdx + 1).Trim();
            remarks = meth.Value.Description.Substring(firstPeriodNdx + 2).Trim();
        }

            
            #line default
            #line hidden
            this.Write("\r\n        /// <summary>\r\n        /// ");
            
            #line 95 "D:\AustinWise\Documents\Visual Studio 2017\Projects\Austin.Linode\GenApi\SpecGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(summary));
            
            #line default
            #line hidden
            this.Write("\r\n        /// </summary>\r\n");
            
            #line 97 "D:\AustinWise\Documents\Visual Studio 2017\Projects\Austin.Linode\GenApi\SpecGen.tt"

                if (remarks != null)
                {
                

            
            #line default
            #line hidden
            this.Write("        /// <remarks>\r\n        /// ");
            
            #line 103 "D:\AustinWise\Documents\Visual Studio 2017\Projects\Austin.Linode\GenApi\SpecGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(remarks));
            
            #line default
            #line hidden
            this.Write("\r\n        /// </remarks>\r\n");
            
            #line 105 "D:\AustinWise\Documents\Visual Studio 2017\Projects\Austin.Linode\GenApi\SpecGen.tt"

                }
                if (!string.IsNullOrEmpty(meth.Value.Throws))
                {

            
            #line default
            #line hidden
            this.Write("        /// <exception cref=\"LinodeException\">possible errors: ");
            
            #line 110 "D:\AustinWise\Documents\Visual Studio 2017\Projects\Austin.Linode\GenApi\SpecGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(meth.Value.Throws));
            
            #line default
            #line hidden
            this.Write("</exception>\r\n");
            
            #line 111 "D:\AustinWise\Documents\Visual Studio 2017\Projects\Austin.Linode\GenApi\SpecGen.tt"

                }
	        foreach (var param in SortParams(meth.Value.Parameters))
                {

            
            #line default
            #line hidden
            this.Write("        /// <param name=\"");
            
            #line 116 "D:\AustinWise\Documents\Visual Studio 2017\Projects\Austin.Linode\GenApi\SpecGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(param.Key));
            
            #line default
            #line hidden
            this.Write("\">");
            
            #line 116 "D:\AustinWise\Documents\Visual Studio 2017\Projects\Austin.Linode\GenApi\SpecGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(param.Value.Description));
            
            #line default
            #line hidden
            this.Write("</param>\r\n");
            
            #line 117 "D:\AustinWise\Documents\Visual Studio 2017\Projects\Austin.Linode\GenApi\SpecGen.tt"

                }

            
            #line default
            #line hidden
            this.Write("\tpublic ");
            
            #line 120 "D:\AustinWise\Documents\Visual Studio 2017\Projects\Austin.Linode\GenApi\SpecGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(PrettyPrintType(returnType)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 120 "D:\AustinWise\Documents\Visual Studio 2017\Projects\Austin.Linode\GenApi\SpecGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(MethodName(meth.Key)));
            
            #line default
            #line hidden
            this.Write("(\r\n");
            
            #line 121 "D:\AustinWise\Documents\Visual Studio 2017\Projects\Austin.Linode\GenApi\SpecGen.tt"

		int paramCount = meth.Value.Parameters.Count();
		PushIndent(new string(' ', 12));
		foreach (var param in SortParams(meth.Value.Parameters))
		{
			Write(ParamDec(param.Key, param.Value));
			if (--paramCount != 0)
			{
				WriteLine(", ");
			}
		}
		PopIndent();

            
            #line default
            #line hidden
            this.Write("\t)\r\n\t{\r\n");
            
            #line 136 "D:\AustinWise\Documents\Visual Studio 2017\Projects\Austin.Linode\GenApi\SpecGen.tt"

		if (meth.Value.HasParameters)
			WriteLine("var myParams = new Dictionary<string, string>();");
		foreach (var param in SortParams(meth.Value.Parameters))
		{
			if (!param.Value.Required)
			{

            
            #line default
            #line hidden
            this.Write("\t\tif (");
            
            #line 144 "D:\AustinWise\Documents\Visual Studio 2017\Projects\Austin.Linode\GenApi\SpecGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(param.Key));
            
            #line default
            #line hidden
            this.Write(" != null)\r\n");
            
            #line 145 "D:\AustinWise\Documents\Visual Studio 2017\Projects\Austin.Linode\GenApi\SpecGen.tt"

			}

            
            #line default
            #line hidden
            this.Write("\t\tmyParams.Add(\"");
            
            #line 148 "D:\AustinWise\Documents\Visual Studio 2017\Projects\Austin.Linode\GenApi\SpecGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(param.Key));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 148 "D:\AustinWise\Documents\Visual Studio 2017\Projects\Austin.Linode\GenApi\SpecGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(param.Key));
            
            #line default
            #line hidden
            
            #line 148 "D:\AustinWise\Documents\Visual Studio 2017\Projects\Austin.Linode\GenApi\SpecGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ToStringPostfix(param.Value)));
            
            #line default
            #line hidden
            this.Write(");\r\n");
            
            #line 149 "D:\AustinWise\Documents\Visual Studio 2017\Projects\Austin.Linode\GenApi\SpecGen.tt"

		}
		if (returnType != typeof(void))
		{
			Write("return ");
		}

            
            #line default
            #line hidden
            this.Write("\t\tGetResponse< ");
            
            #line 156 "D:\AustinWise\Documents\Visual Studio 2017\Projects\Austin.Linode\GenApi\SpecGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(returnType == typeof(void) ? "object" : PrettyPrintType(returnType)));
            
            #line default
            #line hidden
            this.Write(" >(\"");
            
            #line 156 "D:\AustinWise\Documents\Visual Studio 2017\Projects\Austin.Linode\GenApi\SpecGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(meth.Key));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 156 "D:\AustinWise\Documents\Visual Studio 2017\Projects\Austin.Linode\GenApi\SpecGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(meth.Value.HasParameters ? "myParams" : "null"));
            
            #line default
            #line hidden
            
            #line 156 "D:\AustinWise\Documents\Visual Studio 2017\Projects\Austin.Linode\GenApi\SpecGen.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(meth.Key == "user.getapikey" ? ", needsAuth: false" : ""));
            
            #line default
            #line hidden
            this.Write(");\r\n\t}\r\n");
            
            #line 158 "D:\AustinWise\Documents\Visual Studio 2017\Projects\Austin.Linode\GenApi\SpecGen.tt"

    }

            
            #line default
            #line hidden
            this.Write("}\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "16.0.0.0")]
    public class SpecGenBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
